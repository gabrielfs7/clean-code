<?xml version="1.0" ?>
<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">
    <services>
        <service id="app.response.loader" class="GSoares\CleanCode\Application\Service\Response\Loader">
            <tag name="controller.loader" />
        </service>

        <service id="app.response.file_locator" class="Symfony\Component\Config\FileLocator">
            <argument>./</argument>
        </service>

        <service id="app.response.xml_file_loader" class="Symfony\Component\Routing\Loader\XmlFileLoader">
            <argument type="service" id="app.response.file_locator"/>
        </service>

        <service id="app.response.request_context" class="Symfony\Component\Routing\RequestContext">
        </service>

        <service id="app.response.request_context" class="Symfony\Component\Routing\RequestContext">
        </service>

        <!--
        use Symfony\Component\Config\FileLocator;
use Symfony\Component\Config\FileLocatorInterface;
use Symfony\Component\DependencyInjection\ContainerAwareTrait;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Controller\ArgumentResolver;
use Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface;
use Symfony\Component\HttpKernel\Controller\ControllerResolver;
use Symfony\Component\HttpKernel\Controller\ControllerResolverInterface;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Symfony\Component\Routing\Loader\XmlFileLoader;
use Symfony\Component\Routing\Matcher\UrlMatcher;
use Symfony\Component\Routing\Matcher\UrlMatcherInterface;
use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\RouteCollection;
use Symfony\Component\Config\Loader\LoaderInterface as ConfigLoaderInterface

class Loader implements LoaderInterface
{

    use ContainerAwareTrait;

    public function __construct(
        FileLocatorInterface $fileLocator,
        ConfigLoaderInterface $configLoader,
        RequestContext $requestContext,
        UrlMatcherInterface $urlMatcher,
        ControllerResolverInterface $controllerResolver,
        ArgumentResolverInterface $argumentResolver
    ) {

    }


    public function loadResponse(Request $request)
    {
        $fileLocator = new FileLocator(__DIR__ . '/../../../../../di');

        $xmlFileLoader = new XmlFileLoader($fileLocator);

        $routeCollection = $xmlFileLoader->load('routes.xml');

        $this->configureRoutes($routeCollection);

        $context = new RequestContext();
        $context->fromRequest($request);

        $matcher = new UrlMatcher($routeCollection, $context);

        $controllerResolver = new ControllerResolver();
        $argumentResolver = new ArgumentResolver();


    -->

    </services>
</container>
